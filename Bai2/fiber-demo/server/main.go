package main

import (
	// "container/list"
	// "errors"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/gofiber/fiber/v2"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type IncreaseInfo interface {
	GetFieldName() string
}

type Count1 struct{}
type Count2 struct{}
type Count3 struct{}
type Count4 struct{}
type Count5 struct{}

func (c Count1) GetFieldName() string {
	return "count_1"
}

func (c Count2) GetFieldName() string {
	return "count_2"
}

func (c Count3) GetFieldName() string {
	return "count_3"
}

func (c Count4) GetFieldName() string {
	return "count_4"
}

func (c Count5) GetFieldName() string {
	return "count_5"
}

// type info_user struct {
// 	ID       uint
// 	Name     string
// 	Count1   uint      `gorm:"column:count_1"`
// 	Count2   uint      `gorm:"column:count_2"`
// 	Count3   uint      `gorm:"column:count_3"`
// 	Count4   uint      `gorm:"column:count_4"`
// 	Count5   uint      `gorm:"column:count_5"`
// 	UpdateAt time.Time `gorm:"column:update_at"`
// }

// func (info_user) TableName() string {
// 	return "info_user"
// }

type Payload struct {
	Name string `json:"name"`
	Type uint   `json:"type"`
}

// H√†m k·∫øt n·ªëi database
func ConnectDB() *gorm.DB {
	dsn := "root:@tcp(127.0.0.1:3306)/l2_request_counter?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MySQL: %v", err)
	}

	// T·ªëi ∆∞u h√≥a connection pool
	sqlDB, err := db.DB()
	if err != nil {
		log.Fatalf("Kh√¥ng th·ªÉ l·∫•y underlying sql.DB: %v", err)
	}
	
	sqlDB.SetMaxOpenConns(100)
	sqlDB.SetMaxIdleConns(50)
	sqlDB.SetConnMaxLifetime(time.Hour)

	log.Printf("K·∫øt n·ªëi MySQL th√†nh c√¥ng!\n")
	return db
}

func ModelHandlerDB(database *gorm.DB, batch []Payload) {
	// var countNumber int
	var countHandlers = []IncreaseInfo{
		Count1{}, Count2{}, Count3{}, Count4{}, Count5{},
	}

	// T·∫°o 1 map l·ªìng map[name]map[type]s·ªë_l∆∞·ª£ng] ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng 1 ng∆∞·ªùi v·ªõi lo·∫°i c·ªßa ng∆∞·ªùi ƒë·∫•y xu·∫©t hi·ªán m·∫•y l·∫ßn trong request
	counter := map[string]map[uint]uint{} // ch·ª©a t√™n, lo·∫°i, s·ªë l·∫ßn xu·∫•t hi·ªán
	for _, valueBatch := range batch {
		// countNumber++
		// fmt.Printf("ƒëang x·ª≠ l√Ω %v request\n", countNumber)
		_, exists := counter[valueBatch.Name] // c√≥ t√™n n√†y trong counter th√¨ trueLaCo s·∫Ω l√† true

		if !exists { // N·∫øu trueLaCo l√† Fail
			counter[valueBatch.Name] = map[uint]uint{} // Kh·ªüi t·∫°o map con ƒë·ªÉ l∆∞u type
		}
		counter[valueBatch.Name][valueBatch.Type] += 1
	}

	// tickerTime := time.NewTicker(20 * time.Second) // ƒë·∫∑t th·ªùi gian

	for name, typeMap := range counter { //typeMap ch√≠nh l√† map con b√™n trong map[type]s·ªë_l∆∞·ª£ng] n·∫øu mu·ªën l·∫•y th√¥ng tin th√¨ ph·∫£i l·∫∑p l·∫ßn n·ªØa for type, value := range typeMap{}
		for typeUser, quantity := range typeMap {
			field := countHandlers[typeUser-1].GetFieldName() // L·∫•y count_ ƒë√∫ng v·ªõi ƒë√∫ng lo·∫°i

			newData := map[string]interface{}{
				"name": name,
				field:  quantity,
			}
	
			// t∆∞∆°ng ƒë∆∞∆°ng v·ªõi l·ªánh sql: INSERT INTO users (name, count_1) VALUES ('name', quantity) On DUPLICATE KEY UPDATE count_1 = count_1 + quantity
			errDB := database.Clauses(clause.OnConflict{
				Columns: []clause.Column{{Name: "name"}}, // Tr∆∞·ªùng d√πng ƒë·ªÉ ki·ªÉm tra xung ƒë·ªôt
				DoUpdates: clause.Assignments(map[string]interface{}{
					field: gorm.Expr(fmt.Sprintf("%s + ?", field), quantity),
				}), // C·∫≠p nh·∫≠t tr∆∞·ªùng count t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i ng∆∞·ªùi d√πng
			}).Table("info_user").Create(newData).Error

			if errDB != nil {
				log.Printf("‚ùå L·ªói khi upsert user %s: %v\n", name, errDB)
			}

		}
	}
}

func GetInfoUser(bufferGet []Payload) map[string]interface{} {

	infoUser := make(map[string]map[string]interface{}) // Bi·∫øn ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng

	for index, v := range bufferGet {
		_, exists := infoUser[v.Name] // Ki·ªÉm tra xem t√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong map ch∆∞a
		if !exists {
			infoUser[v.Name] = map[string]interface{}{
				"count":     0,
				"positions": []int{},        // {} nghƒ©a l√† kh·ªüi t·∫°o slice int r·ªóng
				"types":     map[uint]int{}, //{} nghƒ©a l√† kh·ªüi t·∫°o map v·ªõi key v√† value l√† int r·ªóng
			} // Kh·ªüi t·∫°o map con n·∫øu ch∆∞a c√≥
		}

		infoUser[v.Name]["count"] = infoUser[v.Name]["count"].(int) + 1
		infoUser[v.Name]["positions"] = append(infoUser[v.Name]["positions"].([]int), (index + 1)) // L·∫•y v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng trong bufferGet, index + 1 ƒë·ªÉ v·ªã tr√≠ b·∫Øt ƒë·∫ßu t·ª´ 1 thay v√¨ 0

		typesMap := infoUser[v.Name]["types"].(map[uint]int) // infoUser[v.name].["types"] s·∫Ω l√† interface{} v√† l√†m th·∫ø n√†y s·∫Ω √©p interface{} th√†nh map[uint]int r·ªìi g√°n v√†o typesMap => typesMap c√≥ ki·ªÉu map[uint]int
		typesMap[v.Type]++                                   // TƒÉng s·ªë l∆∞·ª£ng lo·∫°i t∆∞∆°ng ·ª©ng trong map types
	}

	return map[string]interface{}{
		"total_users":    len(infoUser),
		"total_requests": len(bufferGet),
		"details":        infoUser,
	}

}

var dataChannel chan Payload       // Khai b√°o channel to√†n c·ª•c ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ client
var dataChannelRecent chan Payload // Khai b√°o channel to√†n c·ª•c ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ client
var recentSummary map[string]interface{}
var counterNumber int

// var countNumberRequest int // Bi·∫øn to√†n c·ª•c ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng request ƒë√£ x·ª≠ l√Ω

func main() {
	database := ConnectDB()
	muRecent := sync.Mutex{} // Kh·ªüi t·∫°o mutex ƒë·ªÉ b·∫£o v·ªá bi·∫øn recentSummary

	dataChannel = make(chan Payload, 2000000)       // G√°n gi√° tr·ªã cho channel to√†n c·ª•c
	dataChannelRecent = make(chan Payload, 2000000) // G√°n gi√° tr·ªã cho channel to√†n c·ª•c ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ client

	// Kh·ªüi ƒë·ªông worker x·ª≠ l√Ω ng·∫ßm ch·ªâ m·ªôt l·∫ßn khi ch∆∞∆°ng tr√¨nh start
	go func() { // func x·ª≠ l√Ω ng·∫ßm ch·ªâ ch·∫°y 1 l·∫ßn ƒë·ªÉ ki·ªÉm tra, insert, update ƒëb
		fmt.Println("H√†m DB s·∫µn s√†ng")
		var mu sync.Mutex
		batchSize := 200                         // Khi ƒë·ªß s·ªë l∆∞·ª£ng n√†y s·∫Ω ƒë·∫©y ƒëi x·ª≠ l√Ω logic tr∆∞·ªõc
		semWorker := make(chan struct{}, 1000)     // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng goroutine x·ª≠ l√Ω ƒë·ªìng th·ªùi
		ticker := time.NewTicker(30 * time.Second) // T·∫°o ticker ƒë·ªÉ ki·ªÉm tra m·ªói 10 gi√¢y
		var buffer []Payload
		buffer = make([]Payload, 0, batchSize*2)

		for {
			select {
			case data := <-dataChannel:
				mu.Lock()
				buffer = append(buffer, data) // D·∫•u ... ƒë·ªÉ n·ªëi t·∫•t c·∫£ ph·∫ßn t·ª≠ c·ªßa data v√†o buffer, ko c√≥ th√¨ go nghƒ© l√† ƒëang ƒë∆∞a c·∫£ 1 slice Payload v√†o 1 slice Payload ch·ª© kh√¥ng ph·∫£i t·ª´ng ph·∫ßn t·ª≠
				// fmt.Printf("K√≠ch th∆∞·ªõc buffer l√†: %v\n", len(buffer))
				if len(buffer) >= batchSize {
					temp := make([]Payload, len(buffer))
					copy(temp, buffer)
					buffer = buffer[:0]
					mu.Unlock()
					
					select {
					case semWorker <- struct{}{}:
						go func() {
							defer func() { <-semWorker }()
							ModelHandlerDB(database, temp)
						}()
					default:
						// N·∫øu worker pool ƒë·∫ßy, x·ª≠ l√Ω ƒë·ªìng b·ªô
						ModelHandlerDB(database, temp)
					}
				} else {
					mu.Unlock()
				}
			case <-ticker.C:
				mu.Lock()
				if len(buffer) > 0 {
					temp := make([]Payload, len(buffer))
					copy(temp, buffer)
					buffer = buffer[:0]
					mu.Unlock()
					
					select {
					case semWorker <- struct{}{}:
						go func() {
							defer func() { <-semWorker }()
							ModelHandlerDB(database, temp)
						}()
					default:
						ModelHandlerDB(database, temp)
					}
				} else {
					mu.Unlock()
				}
			}
		}
	}()

	go func() {
		fmt.Println("H√†m Recent s·∫µn s√†ng")
		tickerTimeGet := time.NewTicker(10 * time.Second)
		getMax := 1000
		var bufferGet []Payload
		bufferGet = make([]Payload, 0, getMax*2)

		for {
			select {
			case dataGet := <-dataChannelRecent:
				bufferGet = append(bufferGet, dataGet) // D·∫•u ... ƒë·ªÉ n·ªëi t·∫•t c·∫£ ph·∫ßn t·ª≠ c·ªßa data v√†o bufferGet

				if len(bufferGet) == getMax {

					listInfoUsers := GetInfoUser(bufferGet) // G·ªçi h√†m ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
					muRecent.Lock()
					recentSummary = listInfoUsers // L∆∞u k·∫øt qu·∫£ v√†o bi·∫øn to√†n c·ª•c recentSummary
					muRecent.Unlock()
				} else if len(bufferGet) > getMax {
					bufferGet = bufferGet[len(bufferGet)-getMax:]
					listInfoUsers := GetInfoUser(bufferGet) // G·ªçi h√†m ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
					muRecent.Lock()
					recentSummary = listInfoUsers // L∆∞u k·∫øt qu·∫£ v√†o bi·∫øn to√†n c·ª•c recentSummary
					muRecent.Unlock()
				}

			case <-tickerTimeGet.C:

				if len(bufferGet) > 0 {
					muRecent.Lock()
					listInfoUsers := GetInfoUser(bufferGet) // G·ªçi h√†m ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
					muRecent.Unlock()
					recentSummary = listInfoUsers // L∆∞u k·∫øt qu·∫£ v√†o bi·∫øn to√†n c·ª•c recentSummary
				}
			}
		}
	}()

	app := fiber.New(fiber.Config{
		BodyLimit:             500 * 1024 * 1024, // Cho ph√©p t·ªëi ƒëa 50MB cho m·ªói request
		Prefork:               false,
		DisableStartupMessage: false,
		ReadTimeout:           30 * time.Second,
		WriteTimeout:          30 * time.Second,
		IdleTimeout:           120 * time.Second,
		ReadBufferSize:        131072,
		WriteBufferSize:       131072,
		// ServerHeader:          "Fiber",
		// AppName:               "Request Counter v1.0.0",
	})

	// üîó Route 1: Ki·ªÉm tra xem server ch·∫°y ch∆∞a
	// Health check endpoint
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"status": "ok",
			"time":   time.Now().Format(time.RFC3339),
		})
	})

	// üîó Route 2: Nh·∫≠n request t·ª´ client
	app.Post("/receive-payload", func(c *fiber.Ctx) error {
		var data Payload
		// ‚úÖ Ph√¢n t√≠ch JSON t·ª´ body v√†o struct
		err := c.BodyParser(&data)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
			})
		}

		select {
		case dataChannel <- data:
			counterNumber++
			fmt.Printf("ƒê·∫øm: %v\n",counterNumber)
		default:
			log.Println("‚ùå Channel b·ªã ƒë·∫ßy, b·ªè qua request n√†y")
			return c.Status(fiber.StatusTooManyRequests).JSON(fiber.Map{
				"error": "Server ƒëang qu√° t·∫£i",
			})
		}

		select {
		case dataChannelRecent <- data:
		default:
			log.Println("‚ùå ChannelRecent b·ªã ƒë·∫ßy, b·ªè qua request n√†y")
			return c.Status(fiber.StatusTooManyRequests).JSON(fiber.Map{
				"error": "Server ƒëang qu√° t·∫£i",
			})
		}

		return c.JSON(fiber.Map{
			"message": "ƒê√£ nh·∫≠n",
		})
	})

	// üîó Route 3: Truy xu·∫•t 100.000 ng∆∞·ªùi g·∫ßn nh·∫•t
	app.Post("/recent-users", func(c *fiber.Ctx) error {
		muRecent.Lock()
		summaryCopy := recentSummary
		muRecent.Unlock()

		// N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c ghi v√†o recentSummary
		if summaryCopy == nil {
			return c.Status(fiber.StatusOK).JSON(fiber.Map{
				"message":        "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c x·ª≠ l√Ω g·∫ßn ƒë√¢y",
				"total_requests": 0,
				"total_users":    0,
				"data":           nil,
			})
		}

		// Tr∆∞·ªùng h·ª£p ƒë√£ c√≥ d·ªØ li·ªáu
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"message":        "‚úÖ Truy xu·∫•t th√†nh c√¥ng",
			"total_requests": summaryCopy["total_requests"],
			"total_users":    summaryCopy["total_users"],
			"data":           summaryCopy["details"],
		})
	})

	// L·∫Øng nghe
	fmt.Println("üöÄ Server Fiber ƒëang kh·ªüi ƒë·ªông...")
	app.Listen(":3001")
}
